digraph DFA { 
    // Begin the definition of a directed graph for a DFA (Deterministic Finite Automaton)
    rankdir=LR; 
    // Specify that the graph should be laid out from left to right (LR)

    size="8,5";
    // Set the approximate size of the graph canvas (8 units wide by 5 units tall)

    node [shape = doublecircle]; Start Accept; 
    // Define the `Start` and `Accept` nodes as accepting states (double circles)

    node [shape = circle]; 
    // Define all subsequent nodes as regular states (single circles)

    Start -> Middle [label="Slang words: LOL, OMG, SMH, IDK"]; 
    // Define a transition from the `Start` state to the `Middle` state when encountering abbreviations (LOL, OMG, SMH, IDK)

    Middle -> Middle [label="Slang words: LOL, OMG, SMH, IDK"]; 
    // Define a self-loop on the `Middle` state for repeated abbreviations (LOL, OMG, SMH, IDK)

    Middle -> Emoji [label="Emojis: 😂, 😱, 🙄, 🤷‍♀️"]; 
    // Define a transition from the `Middle` state to the `Emoji` state when encountering an emoji (😂, 😱, 🙄, 🤷‍♀️)

    Emoji -> Emoji [label="Emojis: 😂, 😱, 🙄, 🤷‍♀️"]; 
    // Define a self-loop on the `Emoji` state for repeated emojis (😂, 😱, 🙄, 🤷‍♀️)

    Emoji -> Accept [label="ε"]; 
    // Define a transition from the `Emoji` state to the `Accept` state for an empty string (ε), marking the end of the input
}
